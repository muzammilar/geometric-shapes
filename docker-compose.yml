version: '3.9'

services:

  # protobuilder service can be used to (re)build protos
  protobuilder:
    build:
      context: ./
      dockerfile: ./docker/Dockerfile.base
      target: protobuilder # stop after building this target
    image: geometry/protobuilder:${TAG:-latest}
    # make protos and also the gomod file
    volumes:
      - ./:/geometry
    working_dir: /geometry
    command: bash -c " make protos && make gomodule"
    deploy:
      mode: replicated
      replicas: 1 # if replicas: 0 is used, then none of the other containers are started either

  # basebuilder service can be used to debug the builds
  basebuilder:
    build:
      context: ./
      dockerfile: ./docker/Dockerfile.base
      target: baseimage # stop after building this target
    image: geometry/base:${TAG:-latest}
    volumes:
      - ./:/geometry
    working_dir: /geometry
    command: echo "Please run this container with `make` to build"
    deploy:
      mode: replicated
      replicas: 1 # if replicas: 0 is used, then none of the other containers are started either

  # grpc server for computation
  geomserver:
    hostname: geomserver.geometry
    build:
      context: ./
      dockerfile: ./docker/Dockerfile.geomserver
    image: geometry/geomserver:${TAG:-latest}
    depends_on:
      - basebuilder
    deploy:
      mode: global
    networks:
      - geomnetwork

  # grpc server that generates the data
  dataserver:
    hostname: dataserver.geometry
    build:
      context: ./
      dockerfile: ./docker/Dockerfile.dataserver
    image: geometry/dataserver:${TAG:-latest}
    depends_on:
      - basebuilder
    deploy:
      mode: global
    networks:
      - geomnetwork

  # client that connects to both servers
  goclient:
    # only gurantees the start order (clients can still start before the server)
    depends_on:
      - geomserver
      - dataserver
    build:
      context: ./
      dockerfile: ./docker/Dockerfile.goclient
    image: geometry/goclient:${TAG:-latest}
    deploy:
      mode: replicated
      replicas: 6
    networks:
      - geomnetwork

  # Prometheus
  prometheus:
    image: "prom/prometheus"
    hostname: prometheus.svc.geometry
    volumes:
      - ./prometheus/config/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090 # http port
    networks:
      - geomnetwork

networks:
  geomnetwork:
    driver: bridge
