// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package shapestore

import (
	context "context"
	shape "github.com/muzammilar/examples-go/geometry-grpc/protos/shape"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StoreClient is the client API for Store service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoreClient interface {
	// A client-to-server streaming RPC.
	//
	// Accepts a stream of Points on a route being traversed, returning a
	// RouteSummary when traversal is completed.
	Cuboid(ctx context.Context, opts ...grpc.CallOption) (Store_CuboidClient, error)
	// A Bidirectional streaming RPC.
	//
	// Accepts a stream of shape.Identifier and returns it to the client.
	AsyncReplay(ctx context.Context, opts ...grpc.CallOption) (Store_AsyncReplayClient, error)
}

type storeClient struct {
	cc grpc.ClientConnInterface
}

func NewStoreClient(cc grpc.ClientConnInterface) StoreClient {
	return &storeClient{cc}
}

func (c *storeClient) Cuboid(ctx context.Context, opts ...grpc.CallOption) (Store_CuboidClient, error) {
	stream, err := c.cc.NewStream(ctx, &Store_ServiceDesc.Streams[0], "/shapestore.Store/Cuboid", opts...)
	if err != nil {
		return nil, err
	}
	x := &storeCuboidClient{stream}
	return x, nil
}

type Store_CuboidClient interface {
	Send(*shape.Cuboid) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type storeCuboidClient struct {
	grpc.ClientStream
}

func (x *storeCuboidClient) Send(m *shape.Cuboid) error {
	return x.ClientStream.SendMsg(m)
}

func (x *storeCuboidClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storeClient) AsyncReplay(ctx context.Context, opts ...grpc.CallOption) (Store_AsyncReplayClient, error) {
	stream, err := c.cc.NewStream(ctx, &Store_ServiceDesc.Streams[1], "/shapestore.Store/AsyncReplay", opts...)
	if err != nil {
		return nil, err
	}
	x := &storeAsyncReplayClient{stream}
	return x, nil
}

type Store_AsyncReplayClient interface {
	Send(*shape.Identifier) error
	Recv() (*shape.Identifier, error)
	grpc.ClientStream
}

type storeAsyncReplayClient struct {
	grpc.ClientStream
}

func (x *storeAsyncReplayClient) Send(m *shape.Identifier) error {
	return x.ClientStream.SendMsg(m)
}

func (x *storeAsyncReplayClient) Recv() (*shape.Identifier, error) {
	m := new(shape.Identifier)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StoreServer is the server API for Store service.
// All implementations must embed UnimplementedStoreServer
// for forward compatibility
type StoreServer interface {
	// A client-to-server streaming RPC.
	//
	// Accepts a stream of Points on a route being traversed, returning a
	// RouteSummary when traversal is completed.
	Cuboid(Store_CuboidServer) error
	// A Bidirectional streaming RPC.
	//
	// Accepts a stream of shape.Identifier and returns it to the client.
	AsyncReplay(Store_AsyncReplayServer) error
	mustEmbedUnimplementedStoreServer()
}

// UnimplementedStoreServer must be embedded to have forward compatible implementations.
type UnimplementedStoreServer struct {
}

func (UnimplementedStoreServer) Cuboid(Store_CuboidServer) error {
	return status.Errorf(codes.Unimplemented, "method Cuboid not implemented")
}
func (UnimplementedStoreServer) AsyncReplay(Store_AsyncReplayServer) error {
	return status.Errorf(codes.Unimplemented, "method AsyncReplay not implemented")
}
func (UnimplementedStoreServer) mustEmbedUnimplementedStoreServer() {}

// UnsafeStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoreServer will
// result in compilation errors.
type UnsafeStoreServer interface {
	mustEmbedUnimplementedStoreServer()
}

func RegisterStoreServer(s grpc.ServiceRegistrar, srv StoreServer) {
	s.RegisterService(&Store_ServiceDesc, srv)
}

func _Store_Cuboid_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StoreServer).Cuboid(&storeCuboidServer{stream})
}

type Store_CuboidServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*shape.Cuboid, error)
	grpc.ServerStream
}

type storeCuboidServer struct {
	grpc.ServerStream
}

func (x *storeCuboidServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *storeCuboidServer) Recv() (*shape.Cuboid, error) {
	m := new(shape.Cuboid)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Store_AsyncReplay_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StoreServer).AsyncReplay(&storeAsyncReplayServer{stream})
}

type Store_AsyncReplayServer interface {
	Send(*shape.Identifier) error
	Recv() (*shape.Identifier, error)
	grpc.ServerStream
}

type storeAsyncReplayServer struct {
	grpc.ServerStream
}

func (x *storeAsyncReplayServer) Send(m *shape.Identifier) error {
	return x.ServerStream.SendMsg(m)
}

func (x *storeAsyncReplayServer) Recv() (*shape.Identifier, error) {
	m := new(shape.Identifier)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Store_ServiceDesc is the grpc.ServiceDesc for Store service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Store_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shapestore.Store",
	HandlerType: (*StoreServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Cuboid",
			Handler:       _Store_Cuboid_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "AsyncReplay",
			Handler:       _Store_AsyncReplay_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "shapestore.proto",
}

// GeneratorClient is the client API for Generator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GeneratorClient interface {
	// A server-to-client streaming RPC.
	//
	// Generate a Cuboid with Random Dimensions
	Cuboid(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Generator_CuboidClient, error)
}

type generatorClient struct {
	cc grpc.ClientConnInterface
}

func NewGeneratorClient(cc grpc.ClientConnInterface) GeneratorClient {
	return &generatorClient{cc}
}

func (c *generatorClient) Cuboid(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Generator_CuboidClient, error) {
	stream, err := c.cc.NewStream(ctx, &Generator_ServiceDesc.Streams[0], "/shapestore.Generator/Cuboid", opts...)
	if err != nil {
		return nil, err
	}
	x := &generatorCuboidClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Generator_CuboidClient interface {
	Recv() (*shape.Cuboid, error)
	grpc.ClientStream
}

type generatorCuboidClient struct {
	grpc.ClientStream
}

func (x *generatorCuboidClient) Recv() (*shape.Cuboid, error) {
	m := new(shape.Cuboid)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GeneratorServer is the server API for Generator service.
// All implementations must embed UnimplementedGeneratorServer
// for forward compatibility
type GeneratorServer interface {
	// A server-to-client streaming RPC.
	//
	// Generate a Cuboid with Random Dimensions
	Cuboid(*emptypb.Empty, Generator_CuboidServer) error
	mustEmbedUnimplementedGeneratorServer()
}

// UnimplementedGeneratorServer must be embedded to have forward compatible implementations.
type UnimplementedGeneratorServer struct {
}

func (UnimplementedGeneratorServer) Cuboid(*emptypb.Empty, Generator_CuboidServer) error {
	return status.Errorf(codes.Unimplemented, "method Cuboid not implemented")
}
func (UnimplementedGeneratorServer) mustEmbedUnimplementedGeneratorServer() {}

// UnsafeGeneratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GeneratorServer will
// result in compilation errors.
type UnsafeGeneratorServer interface {
	mustEmbedUnimplementedGeneratorServer()
}

func RegisterGeneratorServer(s grpc.ServiceRegistrar, srv GeneratorServer) {
	s.RegisterService(&Generator_ServiceDesc, srv)
}

func _Generator_Cuboid_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GeneratorServer).Cuboid(m, &generatorCuboidServer{stream})
}

type Generator_CuboidServer interface {
	Send(*shape.Cuboid) error
	grpc.ServerStream
}

type generatorCuboidServer struct {
	grpc.ServerStream
}

func (x *generatorCuboidServer) Send(m *shape.Cuboid) error {
	return x.ServerStream.SendMsg(m)
}

// Generator_ServiceDesc is the grpc.ServiceDesc for Generator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Generator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shapestore.Generator",
	HandlerType: (*GeneratorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Cuboid",
			Handler:       _Generator_Cuboid_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "shapestore.proto",
}
